   WE                            textures/wolfenstein/grey_stone.xpm
NO      textures/wolfenstein/purple_stone.xpm



SO textures/wolfenstein/red_brick.xpm

F      17,    38,     64

EA textures/wolfenstein/wood.xpm



C 218, 234, 235

1111111111111111111111111
10S0110000100000000000001
1000110000000000111111001
1000110000000000110001001
1000000000100000000001001
1111111111111111111111111

void	ft_init_tab(t_cub *cub)
{
	size_t	y;
	size_t	x;

	y = 0;
	x = 0;
	cub->map = malloc(sizeof(t_cell *) * (cub->parse->map_height + 1));
	if (!cub->map)
		ft_error(cub, "Map Alloc failed", -1, -1);
	while (y < cub->parse->map_height)
	{
		x = 0;
		cub->map[y] = malloc(sizeof(t_cell) * (cub->parse->map_width + 1));
		if (!cub->map[y])
			ft_error(cub, "Map Alloc failed", -1, -1);
		while (x < cub->parse->map_width)
		{
			cub->map[y][x].used = false;
			cub->map[y][x].count = 0;
			cub->map[y][x].count_0 = 0;
			x++;
		}
        y++;
    }
    cub->map[y] = NULL;
}

//Rempli le tableau map
t_cell	**ft_fill_tab(int fd, t_cub *cub)
{
	char	**split;
	char	*line;
	size_t		y;
	size_t		j;
	size_t		x;

	y = 0;
	j = 0;
	line = ft_get_next_line(fd);
	if (!line)
		return (ft_error(cub, "NULL line", -1, -1), NULL);
	while (j < cub->parse->total_infos)
	{
		j++;
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			return (ft_error(cub, "NULL line", -1, -1), NULL);
	}
	ft_init_tab(cub);
	while (j <= cub->parse->total_height)
	{
		if (line[0] == '\n' && cub->parse->tmp_height == 0)
		{
			free(line);
			line = malloc((cub->parse->map_width + 1) * sizeof(char));
			if (!line)
				return (ft_error(cub, "Line Alloc failed", -1, -1), NULL);
			memset(line, ' ', cub->parse->map_width);
			line[cub->parse->map_width] = '\0';
		}
		if (ft_check_line(cub, line) == 1)
		{
			x = 0;
			split = ft_mod_split(line, cub);
			if (split == NULL)
				return (ft_error(cub, "Split Alloc failed", -1, -1), NULL);
			while (x < cub->parse->map_width)
			{
				printf ("%c", *split[x]);
				cub->map[y][x].value = *split[x];
				// printf ("%c", cub->map[y][x].value);
				x++;
			}
			printf("\n");
			cub->map[y][x].value = '\0';
			ft_free_split(split);
			y++;
		}
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			break ;
		j++;
	}
	cub->map[y] = NULL;
	return (cub->map);
}

int	ft_fill_tab_lines(t_cub *cub, char *line, size_t y, size_t x)
{
	char	**split;

	if (ft_check_line(cub, line) == 1)
	{
		split = ft_mod_split(line, cub);
		if (split == NULL)
			ft_error(cub, "Split Alloc failed", -1, -1);
		cub->map[y] = malloc(sizeof(t_cell) * (cub->parse->map_width + 1));
		if (!cub->map[y])
			ft_error(cub, "Map Alloc failed", -1, -1);
		while (x < cub->parse->map_width)
		{
			cub->map[y][x].value = *split[x];
			cub->map[y][x].used = false;
			cub->map[y][x].count = 0;
			cub->map[y][x].count_0 = 0;
			x++;
		}
		cub->map[y][x].value = '\0';
		cub->map[y][x].used = false;
		cub->map[y][x].count = 0;
		cub->map[y][x].count_0 = 0;
		ft_free_split(split);
		y++;
	}
	return (y);
}

//Rempli le tableau map
t_cell	**ft_fill_tab(int fd, t_cub *cub)
{
	char	*line;
	size_t		y;
	size_t		j;

	y = 0;
	j = 0;
	line = ft_get_next_line(fd);
	if (!line)
		return (ft_error(cub, "NULL line", -1, -1), NULL);
	ft_init_tab(cub);
	while (j < cub->parse->total_infos)
	{
		j++;
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			return (ft_error(cub, "NULL line", -1, -1), NULL);
	}
	while (j <= cub->parse->total_height)
	{
		if (line[0] == '\n' && cub->parse->tmp_height == 0)
		{
			free(line);
			line = malloc((cub->parse->map_width + 1) * sizeof(char));
			if (!line)
				return (ft_error(cub, "Line Alloc failed", -1, -1), NULL);
			memset(line, ' ', cub->parse->map_width);
			line[cub->parse->map_width] = '\0';
		}
		y = ft_fill_tab_lines(cub, line, y, 0);
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			break ;
		j++;
	}
	cub->map[y] = NULL;
	return (cub->map);
}


void	ft_init_tab(t_cub *cub)
{
	size_t	i;

	i = 0;
	cub->map = malloc(sizeof(t_cell *) * (cub->parse->map_height + 1));
	if (!cub->map)
		ft_error(cub, "Map Alloc failed", -1, -1);
	while (i <= cub->parse->map_height)
	{
        cub->map[i] = NULL;
		i++;
	}
}

int	ft_fill_tab_lines(t_cub *cub, char *line, size_t y, size_t x)
{
	char	**split;

	if (ft_check_line(cub, line) == 1)
	{
		split = ft_mod_split(line, cub);
		if (split == NULL)
			ft_error(cub, "Split Alloc failed", -1, -1);
		cub->map[y] = malloc(sizeof(t_cell) * (cub->parse->map_width + 1));
		if (!cub->map[y])
			ft_error(cub, "Map Alloc failed", -1, -1);
		while (x < cub->parse->map_width)
		{
			cub->map[y][x].value = *split[x];
			cub->map[y][x].used = false;
			cub->map[y][x].count = 0;
			cub->map[y][x].count_0 = 0;
			x++;
		}
		cub->map[y][x].value = '\0';
		cub->map[y][x].used = false;
		cub->map[y][x].count = 0;
		cub->map[y][x].count_0 = 0;
		ft_free_split(split);
		y++;
	}
	return (y);
}

//Rempli le tableau map
t_cell	**ft_fill_tab(int fd, t_cub *cub)
{
	char	*line;
	size_t		y;
	size_t		j;

	y = 0;
	j = 0;
	line = ft_get_next_line(fd);
	if (!line)
		return (ft_error(cub, "NULL line", -1, -1), NULL);
	ft_init_tab(cub);
	while (j < cub->parse->total_infos)
	{
		j++;
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			return (ft_error(cub, "NULL line", -1, -1), NULL);
	}
	while (j <= cub->parse->total_height)
	{
		if (line[0] == '\n' && cub->parse->tmp_height == 0)
		{
			free(line);
			line = malloc((cub->parse->map_width + 1) * sizeof(char));
			if (!line)
				return (ft_error(cub, "Line Alloc failed", -1, -1), NULL);
			memset(line, ' ', cub->parse->map_width);
			line[cub->parse->map_width] = '\0';
		}
		y = ft_fill_tab_lines(cub, line, y, 0);
		free(line);
		line = ft_get_next_line(fd);
		if (!line)
			break ;
		j++;
	}
	cub->map[y] = NULL;
	return (cub->map);
}